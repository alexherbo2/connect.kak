#!/bin/sh

. "$KAKOUNE_PRELUDE"

# Option parser
# For the simplicity of parsing, we only parse the first argument.
wait=false
case "$1" in
  -wait) wait=true; shift ;;
  --) shift; break ;;
esac

commands=''
regex=''
while test $# -gt 0; do
  file=$(realpath "$1")
  kak_quoted_file=$(kak_escape "$file")
  # Optional coordinates
  case "$2" in
    +*:*)
      line=${2#+}; line=${line%:*}
      column=${2#*:}
      shift 2
      commands="edit $kak_quoted_file $line $column; $commands"
      ;;
    +*)
      line=${2#+}
      shift 2
      commands="edit $kak_quoted_file $line; $commands"
      ;;
    *)
      shift
      commands="edit $kak_quoted_file; $commands"
      ;;
  esac
  regex="${regex}|\\Q${file}\\E"
done
regex=${regex#|}
kak_quoted_regex=$(kak_escape "$regex")

send "$commands"

if test "$wait" = true; then
  state=$(mktemp -d)
  trap 'rm -Rf "$state"' EXIT
  mkfifo "$state/status"
  send "
    hook -group connect-detach global BufWritePost $kak_quoted_regex %{
      remove-hooks global connect-detach
      delete-buffer %val{hook_param}
      echo -to-file $state/status 0
    }
    hook -group connect-detach global BufClose $kak_quoted_regex %{
      remove-hooks global connect-detach
      echo -to-file $state/status 1
    }
  "
  read status < "$state/status"
  exit "$status"
fi
